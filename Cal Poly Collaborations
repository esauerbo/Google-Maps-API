<!DOCTYPE html>
<html>
  <head>
    <style>
      html,
      body {
        font-family: Arial, sans-serif;
        height: 100%;
        margin: 0;
        padding: 0;
      }

      .container {
        height: 100%;
        position: relative;
      }

      input {
        font-size: 12px;
      }

      h1, h2 {
        color: #525454;
        font-size: 22px;
        margin: 0 0 10px 0;
        text-align: center;
      }

      #hide-institutions,
      #show-institutions {
        width: 48%;
      }

      hr {
        background: #D0D7D9;
        height: 1px;
        margin: 20px 0 20px 0;
        border: none;
      }

      #map {
        bottom:0px;
        height: 100%;
        left: 362px;
        position: absolute;
        right: 0px;
      }

      .options-box {
        background: #fff;
        border: 1px solid #999;
        border-radius: 3px;
        height: 100%;
        line-height: 35px;
        padding: 10px 10px 30px 10px;
        text-align: left;
        width: 340px;
      }

      #pano {
        width: 200px;
        height: 200px;
      }

      .text {
        font-size: 12px;
      }

      #toggle-drawing {
        width: 27%;
        position: relative;
        margin-left: 10px;
      }

      #zoom-to-area-text{
        position: relative;
        width: 70%;
      }

      #zoom-to-area{
        width: 24%
      }

      #add-institution-text{
      position: relative;
      width: 70%;
      }

      #add-institution{
        width: 24%
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="options-box">
        <h1>Cal Poly Collaborations Network</h1>
        <div>
          <input id="show-institutions" type="button" value="Show Institutions">
          <input id="hide-institutions" type="button" value="Hide Institutions">
          <hr>
          <span class="text"> Draw a shape to search within it!</span>
          <input id="toggle-drawing"  type="button" value="Drawing Tools">
        </div>
        <hr>
        <div>
          <input id="zoom-to-area-text" type="text" placeholder="Enter an area!">
          <input id="zoom-to-area" type="button" value="Zoom">
        </div>
        <hr>
        <h2>Add an institution.</h2>
        <div>
          <input id="add-institution-text" type="text" placeholder="Enter an institution name.">
          <input id="add-institution" type="button" value="Add">
        </div>
      </div>
      <div id="map"></div>
    </div>
    <script>
      var map;

      // Create a new blank array for all the everyone markers.
      var markers = [];

      // This global polygon variable is to ensure only ONE polygon is rendered.
      var polygon = null;

      function initMap() {
        // Create a styles array to use with the map.
        var styles = [
          {
            featureType: 'water',
            stylers: [
              { color: '#19a0d8' }
            ]
          },{
            featureType: 'administrative',
            elementType: 'labels.text.stroke',
            stylers: [
              { color: '#ffffff' },
              { weight: 6 }
            ]
          },{
            featureType: 'administrative',
            elementType: 'labels.text.fill',
            stylers: [
              { color: '#e85113' }
            ]
          },{
            featureType: 'road.highway',
            elementType: 'geometry.stroke',
            stylers: [
              { color: '#efe9e4' },
              { lightness: -40 }
            ]
          },{
            featureType: 'transit.station',
            stylers: [
              { weight: 9 },
              { hue: '#e85113' }
            ]
          },{
            featureType: 'road.highway',
            elementType: 'labels.icon',
            stylers: [
              { visibility: 'off' }
            ]
          },{
            featureType: 'water',
            elementType: 'labels.text.stroke',
            stylers: [
              { lightness: 100 }
            ]
          },{
            featureType: 'water',
            elementType: 'labels.text.fill',
            stylers: [
              { lightness: -100 }
            ]
          },{
            featureType: 'poi',
            elementType: 'geometry',
            stylers: [
              { visibility: 'on' },
              { color: '#f0e4d3' }
            ]
          },{
            featureType: 'road.highway',
            elementType: 'geometry.fill',
            stylers: [
              { color: '#efe9e4' },
              { lightness: -25 }
            ]
          }
        ];

        // Constructor creates a new map - only center and zoom are required.
        map = new google.maps.Map(document.getElementById('map'), {
          center: {lat: 49.249212, lng: -54.353105},
          zoom: 3,
          styles: styles,
          mapTypeControl: false
        });

        // These are the people that will be shown to the user.
        // Normally we'd have these in a database instead.
        var locations = [
          {title: 'Cal Poly SLO', location: {lat: 35.305496, lng: -120.6625}},
          {title: 'Berkeley', location: {lat: 37.8715, lng: -122.2730}},
          {title: 'Gonzaga', location: {lat: 47.66638, lng: -117.400930}},
          {title: 'Cornell', location: {lat: 42.453396, lng: -76.473586}},
        ];

        var largeInfowindow = new google.maps.InfoWindow();

        // Initialize the drawing manager.
        var drawingManager = new google.maps.drawing.DrawingManager({
          drawingMode: google.maps.drawing.OverlayType.POLYGON,
          drawingControl: true,
          drawingControlOptions: {
            position: google.maps.ControlPosition.TOP_LEFT,
            drawingModes: [
              google.maps.drawing.OverlayType.POLYGON
            ]
          }
        });

        // Style the markers a bit. This will be our listing marker icon.
        var defaultIcon = makeMarkerIcon('0091ff');

        // Create a "highlighted location" marker color for when the user
        // mouses over the marker.
        var highlightedIcon = makeMarkerIcon('FFFF24');


        // The following group uses the location array to create an array of markers on initialize.
        for (var i = 0; i < locations.length; i++) {
          // Get the position from the location array.
          var position = locations[i].location;
          var title = locations[i].title;
          // Create a marker per location, and put into markers array.
          var marker = new google.maps.Marker({
            position: position,
            title: title,
            animation: google.maps.Animation.DROP,
            icon: defaultIcon,
            id: i
          });
          // Push the marker to our array of markers.
          markers.push(marker);
          // Create an onclick event to open the large infowindow at each marker.
          marker.addListener('click', function() {
            populateInfoWindow(this, largeInfowindow);
          });
          // Two event listeners - one for mouseover, one for mouseout,
          // to change the colors back and forth.
          marker.addListener('mouseover', function() {
            this.setIcon(highlightedIcon);
          });
          marker.addListener('mouseout', function() {
            this.setIcon(defaultIcon);
          });
        }

        document.getElementById('show-institutions').addEventListener('click', showInstitutions);
        document.getElementById('hide-institutions').addEventListener('click', hideInstitutions);

        document.getElementById('toggle-drawing').addEventListener('click', function() {
          toggleDrawing(drawingManager);
        });

        document.getElementById('zoom-to-area').addEventListener('click', function(){
          zoomToArea();
        });

        document.getElementById('add-institution').addEventListener('click', function(){
          addInstitution(markers, largeInfowindow);
        });




        // Add an event listener so that the polygon is captured,  call the
        // searchWithinPolygon function. This will show the markers in the polygon,
        // and hide any outside of it.
        drawingManager.addListener('overlaycomplete', function(event) {
          // First, check if there is an existing polygon.
          // If there is, get rid of it and remove the markers
          if (polygon) {
            polygon.setMap(null);
            hideInstitutions(markers);
          }
          // Switching the drawing mode to the HAND (i.e., no longer drawing).
          drawingManager.setDrawingMode(null);
          // Creating a new editable polygon from the overlay.
          polygon = event.overlay;
          polygon.setEditable(true);
          // Searching within the polygon.
          searchWithinPolygon();
          // Make sure the search is re-done if the poly is changed.
          polygon.getPath().addListener('set_at', searchWithinPolygon);
          polygon.getPath().addListener('insert_at', searchWithinPolygon);
          var area = google.maps.gometry.spherical.computeArea(polygon.getPath());
          window.alert(area+"SQUARE METERS");
        });
      }

      // This function populates the infowindow when the marker is clicked. We'll only allow
      // one infowindow which will open at the marker that is clicked, and populate based
      // on that markers position.
      function populateInfoWindow(marker, infowindow) {
        // Check to make sure the infowindow is not already opened on this marker.
        if (infowindow.marker != marker) {
          // Clear the infowindow content to give the streetview time to load.
          infowindow.setContent(marker.title);
          infowindow.marker = marker;
          // Make sure the marker property is cleared if the infowindow is closed.
          infowindow.addListener('closeclick', function() {
            infowindow.marker = null;
          });
          var streetViewService = new google.maps.StreetViewService();
          var radius = 50;

          // In case the status is OK, which means the pano was found, compute the
          // position of the streetview image, then calculate the heading, then get a
          // panorama from that and set the options
          function getStreetView(data, status) {
            if (status == google.maps.StreetViewStatus.OK) {
              var nearStreetViewLocation = data.location.latLng;
              var heading = google.maps.geometry.spherical.computeHeading(
                nearStreetViewLocation, marker.position);
                infowindow.setContent('<div>' + marker.title + '</div><div id="pano"></div>');
                var panoramaOptions = {
                  position: nearStreetViewLocation,
                  pov: {
                    heading: heading,
                    pitch: 30
                  }
                };
              var panorama = new google.maps.StreetViewPanorama(
                document.getElementById('pano'), panoramaOptions);
            } else {
              infowindow.setContent('<div>' + marker.title + '</div>' +
                '<div>No Street View Found</div>');
            }
          }
          // Use streetview service to get the closest streetview image within
          // 50 meters of the markers position
          streetViewService.getPanoramaByLocation(marker.position, radius, getStreetView);
          // Open the infowindow on the correct marker.
          infowindow.open(map, marker);
        }
      }

      // This function will loop through the markers array and display them all.
      function showInstitutions() {
        var bounds = new google.maps.LatLngBounds();
        // Extend the boundaries of the map for each marker and display the marker
        for (var i = 0; i < markers.length; i++) {
          markers[i].setMap(map);
          bounds.extend(markers[i].position);
        }
        map.fitBounds(bounds);
      }

      // This function will loop through the markers and hide them all.
      function hideInstitutions() {
        for (var i = 0; i < markers.length; i++) {
          markers[i].setMap(null);
        }
      }

      // This function takes in a COLOR, and then creates a new marker
      // icon of that color. The icon will be 21 px wide by 34 high, have an origin
      // of 0, 0 and be anchored at 10, 34).
      function makeMarkerIcon(markerColor) {
        var markerImage = new google.maps.MarkerImage(
          'http://chart.googleapis.com/chart?chst=d_map_spin&chld=1.15|0|'+ markerColor +
          '|40|_|%E2%80%A2',
          new google.maps.Size(21, 34),
          new google.maps.Point(0, 0),
          new google.maps.Point(10, 34),
          new google.maps.Size(21,34));
        return markerImage;
      }

      // This shows and hides (respectively) the drawing options.
      function toggleDrawing(drawingManager) {
        if (drawingManager.map) {
          drawingManager.setMap(null);
          // In case the user drew anything, get rid of the polygon
          if (polygon !== null) {
            polygon.setMap(null);
          }
        } else {
          drawingManager.setMap(map);
        }
      }

      // This function hides all markers outside the polygon,
      // and shows only the ones within it. This is so that the
      // user can specify an exact area of search.
      function searchWithinPolygon() {
        for (var i = 0; i < markers.length; i++) {
          if (google.maps.geometry.poly.containsLocation(markers[i].position, polygon)) {
            markers[i].setMap(map);
          } else {
            markers[i].setMap(null);
          }
        }
      }

      // This function takes the input value in the find nearby area text input,
      // locates it, then zooms into that area. This is so the user can show all listings,
      // Then decide to focus on one area of the the map.
      function zoomToArea(){
        // Initialize the geocoder.
        var geocoder = new google.maps.Geocoder();
        // Get the address or place that the user entered.
        var address = document.getElementById('zoom-to-area-text').value;
        // Make sure the address isn't blank.
        if (address == '') {
          window.alert('You must enter an area, or address.')
        } else {
          // Geocode the address/area entere dto get the center.
          // Then center the map on it and zoom in.
          geocoder.geocode(
                  {address: address
                  }, function(results, status) {
                   if (status == google.maps.GeocoderStatus.OK) {
                     map.setCenter(results[0].geometry.location);
                     map.setZoom(15);
                   } else {
                     window.alert('We could not find that location - try entering a more specific place');
                   }
                  }
          )
        }
      }

      function addInstitution(markers, infowindow){
        // Initialize the geocoder.
        var geocoder = new google.maps.Geocoder();
        // Get the address or place that the user entered.
        var address = document.getElementById('add-institution-text').value;
        // Make sure the address isn't blank.
        if (address == '') {
          window.alert('You must enter a school name or address.')
        } else {
          // Geocode the address/area entered to get the center.
          // Then center the map on it and zoom in.
          geocoder.geocode(
                  {address: address
                  }, function(results, status) {
                   if (status == google.maps.GeocoderStatus.OK) {
                     var defaultIcon = makeMarkerIcon('0091ff');
                     var highlightedIcon = makeMarkerIcon('FFFF24');
                     map.setZoom(11);
                     map.setCenter(results[0].geometry.location);
                     const marker = new google.maps.Marker({
                       map: map,
                       title: results[0].formatted_address, // How to get name instead of address?? 
                       position: results[0].geometry.location,
                       icon: defaultIcon,
                       animation: google.maps.Animation.DROP,
                       id: markers.length + 1
                     });
                     markers.push(marker);
                     marker.addListener('click', function() {
                       populateInfoWindow(this, infowindow);
                      });
                     // Two event listeners - one for mouseover, one for mouseout,
                     // to change the colors back and forth.
                     marker.addListener('mouseover', function() {
                       this.setIcon(highlightedIcon);
                     });
                     marker.addListener('mouseout', function() {
                       this.setIcon(defaultIcon);
                     });
                   } else {
                     window.alert('We could not find that location - try entering a more specific place');
                   }
                  }
          )
        }
      }

    </script>

    <script async defer src=
        "https://maps.googleapis.com/maps/api/js?libraries=geometry,drawing&key=AIzaSyC1fm5j1RQqJkszE5Z0KSyACHdX8vsC-mo&v=3&callback=initMap">
    </script>

  </body>
</html>
